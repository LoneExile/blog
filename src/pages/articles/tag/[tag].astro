---
import MainLayout from "@layouts/MainLayout.astro";
import BlogCard from "@components/BlogCard.astro";
import Pagination from "@components/Pagination.astro";
import { getCollection } from "astro:content";
import NotFound from "@components/NotFound.astro";
import LoneExile from "@assets/LoneExile.png";
import { type AnyCollectionEntry, collections } from "@utils/load-data.ts";

export async function getStaticPaths() {
  let language = "en";
  let posts: AnyCollectionEntry[] = [];
  type MyCollectionKeys = keyof typeof collections;

  for (const collection of Object.keys(collections) as MyCollectionKeys[]) {
    let collectionEntries = await getCollection(collection);
    collectionEntries = collectionEntries.filter(
      (post) =>
        post.data.language === language &&
        (post.data.show === true || post.data.show === undefined),
    );
    posts = posts.concat(collectionEntries);
  }
  let tags: string[] = [];

  posts.forEach((post) => {
    if (post.data.tags) {
      tags = [...tags, ...post.data.tags];
    }
  });

  return tags.map((tag) => ({
    params: { tag: tag.toLowerCase() },
    props: { posts, language },
  }));
}

let { posts, language } = Astro.props;
let { tag } = Astro.params;

posts = posts.filter((post) => {
  let hasTag = false;
  post.data.tags?.forEach((postTag: string) => {
    if (
      postTag.toLowerCase() === tag &&
      (import.meta.env.PROD ? post.data.draft !== true : true)
    ) {
      hasTag = true;
    }
  });
  return hasTag;
});

const currentPath = "articles";

const title = "Articles Tag: ";
const siteDescription = "A collection of articles tag: ";

if (tag === undefined) {
  throw new Error("Tag is required");
}

const currentPage: number | null = +Astro.url.searchParams.get("page")! || 1;
const totalPages: number = Math.ceil(posts.length / 4);
const totalPosts: number = posts.length;
const articlesForPage: AnyCollectionEntry[] = posts.slice(
  (currentPage - 1) * 4,
  currentPage * 4,
);
---

<MainLayout description={siteDescription} {currentPath} {language} {title}>
  {
    totalPosts === 0 ? (
      <NotFound image={LoneExile} />
    ) : (
      <>
        <BlogCard posts={articlesForPage} {language} />
        <Pagination
          currentPage={currentPage}
          totalPosts={totalPosts}
          disablePrevious={currentPage === 1}
          disableNext={currentPage === totalPages}
          language={language}
          pathPrependWith="articles/tag/"
          path={tag}
        />
      </>
    )
  }
</MainLayout>
