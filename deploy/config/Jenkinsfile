pipeline {
    environment {
        CONTAINER_REGISTRY_CREDENTIALS = credentials('docker')
        CONTAINER_REGISTRY_CREDENTIALS_HARBOR = credentials('harbor')
        SONARQUBE_SCANNER_HOME = tool 'sonar-scanner' // NOTE: need to match the name of the SonarQube installer in Tools
    }

    agent {
        kubernetes {
                yaml '''
            apiVersion: v1
            kind: Pod
            spec:
              nodeSelector: 
                chip: intel
              tolerations:
                - key: "chip"
                  operator: "Equal"
                  value: "intel"
                  effect: "NoSchedule"
              containers:
              - name: docker
                image: loneexile/docker-cli:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - name: certs
                  readOnly: true
                  mountPath: /certs
                - name: buildkit-cache
                  mountPath: /var/lib/buildkit
                  subPath: buildkit
              - name: jnlp
                image: loneexile/jenkins-inbound-node:latest
                command:
                 - /usr/local/bin/jenkins-agent
                tty: true
              volumes:
              - name: certs
                secret:
                    secretName: buildkit-client-certs
              - name: buildkit-cache
                persistentVolumeClaim:
                  claimName: jenkins-pvc
            '''
        }
    }

    stages {
        stage('SonarQube Analysis') {
            steps {
                container('jnlp') {
                    withSonarQubeEnv('sonar') { // NOTE: need to match the name of the SonarQube server configuration in Jenkins
                        sh "${env.SONARQUBE_SCANNER_HOME}/bin/sonar-scanner -Dproject.settings=deploy/config/sonar-project.properties"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Image') {
            steps {
                container('docker') {
                    sh 'ls'
                    sh 'echo $CONTAINER_REGISTRY_CREDENTIALS_PSW | docker login --username $CONTAINER_REGISTRY_CREDENTIALS_USR --password-stdin'
                    sh 'echo $CONTAINER_REGISTRY_CREDENTIALS_HARBOR_PSW | docker login https://harbor.voidbox.io --username $CONTAINER_REGISTRY_CREDENTIALS_HARBOR_USR --password-stdin'
                    // sh 'make ximage VERSION=v1.0.0'
                    sh 'make ximage'
                }
            }
        }
    }
}
